fn main() {
    println!("-------------------------");

    /*
    * Statically Typed ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏≤‡∏ô‡∏ä‡∏ô‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (Type Inference)
    */
    // ‡πÄ‡∏£‡∏≤‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏ä‡∏ô‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô‡πÑ‡∏î‡πâ
    // `i32` ‡∏Ñ‡∏∑‡∏≠ signed integer ‡∏Ç‡∏ô‡∏≤‡∏î 32 ‡∏ö‡∏¥‡∏ï
    let a: i32 = 100;
    // a = 100.5; // ‡∏à‡∏∞‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡πÄ‡∏û‡∏£‡∏≤‡∏∞ `a` ‡∏ñ‡∏π‡∏Å‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡πÄ‡∏õ‡πá‡∏ô i32

    // ‡∏´‡∏£‡∏∑‡∏≠‡∏à‡∏∞‡∏õ‡∏•‡πà‡∏≠‡∏¢‡πÉ‡∏´‡πâ‡∏Ñ‡∏≠‡∏°‡πÑ‡∏û‡πÄ‡∏•‡∏≠‡∏£‡πå‡∏≠‡∏ô‡∏∏‡∏°‡∏≤‡∏ô‡∏ä‡∏ô‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Å‡πá‡πÑ‡∏î‡πâ
    // Rust ‡∏à‡∏∞‡∏≠‡∏ô‡∏∏‡∏°‡∏≤‡∏ô‡∏ß‡πà‡∏≤ `b` ‡πÄ‡∏õ‡πá‡∏ô i32 (‡∏ä‡∏ô‡∏¥‡∏î‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö integer)
    let b = -200;
    // b = 200.5; // ‡∏à‡∏∞‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡πÄ‡∏û‡∏£‡∏≤‡∏∞ `b` ‡∏ñ‡∏π‡∏Å‡∏≠‡∏ô‡∏∏‡∏°‡∏≤‡∏ô‡πÄ‡∏õ‡πá‡∏ô i32

    println!("integer with explicit type: {}", a);
    println!("integer with inferred type: {}", b);

    /*
    * Scalar Types: Floating-Points
    */

    println!("-------------------------");

    // Floating-point (‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏®‡∏ô‡∏¥‡∏¢‡∏°)
    // f64 ‡∏Ñ‡∏∑‡∏≠ float ‡∏Ç‡∏ô‡∏≤‡∏î 64 ‡∏ö‡∏¥‡∏ï ‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥ 15-17 ‡∏´‡∏•‡∏±‡∏Å
    let temp: f64 = 3.1498998998998798799899898999;
    // f32 ‡∏Ñ‡∏∑‡∏≠ float ‡∏Ç‡∏ô‡∏≤‡∏î 32 ‡∏ö‡∏¥‡∏ï ‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥ 6-9 ‡∏´‡∏•‡∏±‡∏Å
    let presure: f32 = 10.983939398933;

    println!("floating-point number: {}", temp);
    println!("floating-point number: {}", presure);

    println!("-------------------------");

    /*
    * Signed ‡πÅ‡∏•‡∏∞ Unsigned Integers
    */
    // Signed integer ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏¥‡∏î‡∏•‡∏ö‡πÑ‡∏î‡πâ
    let balance: i32 = -500;

    println!("Signed integer: {}", balance);

    // Unsigned integer ‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏î‡πâ‡πÅ‡∏Ñ‡πà‡∏Ñ‡πà‡∏≤‡∏ö‡∏ß‡∏Å‡πÅ‡∏•‡∏∞‡∏®‡∏π‡∏ô‡∏¢‡πå
    // u8 ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà 0 ‡∏ñ‡∏∂‡∏á 255
    let age: u8 = 0;

    println!("Unsigned integer: {}", age);

    /*
    * ‡∏ä‡∏ô‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏ô‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥ (Bits)
    */
    // i8 ‡πÉ‡∏ä‡πâ 8 ‡∏ö‡∏¥‡∏ï ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà -128 ‡∏ñ‡∏∂‡∏á 127
    let small_signed_number: i8 = 127;

    // u16 ‡πÉ‡∏ä‡πâ 16 ‡∏ö‡∏¥‡∏ï ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà 0 ‡∏ñ‡∏∂‡∏á 65,535
    let medium_unsigned_number: u16 = 65_535;

    println!("Small signed number: {}", small_signed_number);
    println!("Medium unsigned number: {}", medium_unsigned_number);

    println!("-------------------------");

    /*
    * Boolean Type
    */
    // Boolean type ‡∏°‡∏µ‡πÅ‡∏Ñ‡πà‡∏™‡∏≠‡∏á‡∏Ñ‡πà‡∏≤: true ‡πÅ‡∏•‡∏∞ false
    let is_active: bool = true;
    let is_logged_in: bool = false;
    println!("Is active: {}", is_active);
    println!("Is logged in: {}", is_logged_in);

    println!("-------------------------");

    /*
    * Character Type
    */
    // Character type ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£ Unicode ‡∏Ç‡∏ô‡∏≤‡∏î 4 ‡πÑ‡∏ö‡∏ï‡πå
    // ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Å‡πá‡∏ö‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏±‡∏ç‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå‡πÑ‡∏î‡πâ
    let letter: char = 'R';
    let emoji: char = 'üòä';
    println!("Letter: {}", letter);
    println!("Emoji: {}", emoji);

    println!("-------------------------");

    /*
    * Character Type String
    */
    // String type ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏£‡∏∑‡∏≠‡∏ä‡∏∏‡∏î‡∏≠‡∏±‡∏Å‡∏Ç‡∏£‡∏∞
    let greeting: String = "Hello, world!".to_string();
    println!("Greeting: {}", greeting);

    println!("-------------------------");

    /*
    * ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ (Variables)
    */
    // ‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ä‡∏∑‡πà‡∏≠ 'x' ‡πÅ‡∏•‡∏∞‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô 5
    let x = 5;
    println!("The value of x is: {}", x);

    println!("-------------------------");

    /*
    * Interpolation (‡∏Å‡∏≤‡∏£‡πÅ‡∏ó‡∏£‡∏Å‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô‡∏™‡∏ï‡∏£‡∏¥‡∏á)
    */

    let name = "Alice";
    let age = 30;
    // age = 25; // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ñ‡πà‡∏≤ 'age' ‡πÄ‡∏õ‡πá‡∏ô 25 ‡∏à‡∏∞‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡πÄ‡∏û‡∏£‡∏≤‡∏∞ 'age' ‡∏ñ‡∏π‡∏Å‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡πÄ‡∏õ‡πá‡∏ô immutable

    // ‡πÅ‡∏ó‡∏£‡∏Å‡∏Ñ‡πà‡∏≤‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ 'name' ‡πÅ‡∏•‡∏∞ 'age' ‡∏•‡∏á‡πÉ‡∏ô‡∏™‡∏ï‡∏£‡∏¥‡∏á
    println!("My name is {} and I am {} years old.", name, age);

    // {0} ‡∏à‡∏∞‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡∏ñ‡∏∂‡∏á "Alice" (‡∏≠‡∏≤‡∏£‡πå‡∏Å‡∏¥‡∏ß‡πÄ‡∏°‡∏ô‡∏ï‡πå‡∏ï‡∏±‡∏ß‡πÅ‡∏£‡∏Å)
    // {1} ‡∏à‡∏∞‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡∏ñ‡∏∂‡∏á "Bob" (‡∏≠‡∏≤‡∏£‡πå‡∏Å‡∏¥‡∏ß‡πÄ‡∏°‡∏ô‡∏ï‡πå‡∏ï‡∏±‡∏ß‡∏ó‡∏µ‡πà‡∏™‡∏≠‡∏á)
    println!("{0} is a friend of {1}. And {1} is also a friend of {0}.", "Alice", "Bob");

    println!("-------------------------");

    /*
    * Mutability and Immutability (‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ñ‡πà‡∏≤‡πÑ‡∏î‡πâ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ)
    */
    // ‡πÇ‡∏î‡∏¢‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÉ‡∏ô Rust ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤‡πÑ‡∏î‡πâ (Immutable) ‡πÄ‡∏ß‡πâ‡∏ô‡πÅ‡∏ï‡πà‡∏à‡∏∞‡∏£‡∏∞‡∏ö‡∏∏ mut

    // 'immutable_var' ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤‡πÑ‡∏î‡πâ
    let immutable_var = 10;
    // immutable_var = 20; // ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÄ‡∏Å‡∏¥‡∏î error ‡∏ï‡∏≠‡∏ô‡∏Ñ‡∏≠‡∏°‡πÑ‡∏û‡∏•‡πå
    println!("Immutable variable value: {}", immutable_var);

    // 'mutable_var' ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤‡πÑ‡∏î‡πâ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏°‡∏µ 'mut'
    let mut mutable_var = 15;
    println!("Original value: {}", mutable_var);

    mutable_var = 25; // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ñ‡πà‡∏≤‡πÑ‡∏î‡πâ
    mutable_var += 5; // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡πà‡∏≤‡∏≠‡∏µ‡∏Å 5
    mutable_var *= 2; // ‡∏Ñ‡∏π‡∏ì‡∏î‡πâ‡∏ß‡∏¢ 2
    mutable_var -= 10; // ‡∏•‡∏ö 10
    mutable_var /= 5; // ‡∏´‡∏≤‡∏£‡∏î‡πâ‡∏ß‡∏¢ 5

    println!("Mutable variable value: {}", mutable_var);


    println!("-------------------------");

    /*
    * Constants (‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏á‡∏ó‡∏µ‡πà)
    */
    // ‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏á‡∏ó‡∏µ‡πà ‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏ô‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (type annotation)
    const MAX_POINTS: u32 = 100_000;
    const MIN_POINTS: u32 = 0;

    // ‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏á‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÑ‡∏î‡πâ
    // MAX_POINTS = 200_000; // ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÄ‡∏Å‡∏¥‡∏î error ‡∏ï‡∏≠‡∏ô‡∏Ñ‡∏≠‡∏°‡πÑ‡∏û‡∏•‡πå
    println!("The maximum points are: {}", MAX_POINTS);
    println!("The minimum points are: {}", MIN_POINTS);

    println!("-------------------------");

    /*
    * Variable Shadowing (‡∏Å‡∏≤‡∏£‡∏ö‡∏î‡∏ö‡∏±‡∏á‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£)
    */
    let x = 5;
    println!("The value of x is: {}", x); // ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• 5

    // 'x' ‡∏ï‡∏±‡∏ß‡πÉ‡∏´‡∏°‡πà‡∏ô‡∏µ‡πâ‡∏à‡∏∞ "‡∏ö‡∏î‡∏ö‡∏±‡∏á" (shadow) 'x' ‡∏ï‡∏±‡∏ß‡πÄ‡∏î‡∏¥‡∏°
    // ‡πÄ‡∏£‡∏≤‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏ô‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ‡∏î‡πâ‡∏ß‡∏¢
    let x = "hello"; 
    println!("The value of x is now: {}", x); // ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• "hello"

    println!("-------------------------");

    /*
    * Scopes and Blocks (‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï‡πÅ‡∏•‡∏∞‡∏ö‡∏•‡πá‡∏≠‡∏Å)
    */

    let outer_var = "I'm outside";

    { // ‡πÄ‡∏£‡∏¥‡πà‡∏° scope ‡πÉ‡∏´‡∏°‡πà
        let inner_var = "I'm inside";
        println!("{}", outer_var); // ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å‡πÑ‡∏î‡πâ
        println!("{}", inner_var); // ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡πÑ‡∏î‡πâ
    } // ‡∏à‡∏ö scope

    println!("{}", outer_var);
    // println!("{}", inner_var); // ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ‡∏à‡∏∞ error ‡πÄ‡∏û‡∏£‡∏≤‡∏∞ 'inner_var' ‡∏≠‡∏¢‡∏π‡πà‡∏ô‡∏≠‡∏Å scope ‡πÅ‡∏•‡πâ‡∏ß

    println!("-------------------------");
    // unused_function(); // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô

    // Use the type alias
    let distance: Kilometers = 42; // ‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏ù‡∏á 'Kilometers' ‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô
    let another_distance: i32 = 100; // ‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ i32 ‡∏≠‡∏µ‡∏Å‡∏ï‡∏±‡∏ß
    println!("Distance in kilometers: {}", distance);
    println!("Another distance in i32: {}", another_distance);

    println!("-------------------------");
   
    // ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
    match divide(10.0, 2.0) {
        Ok(result) => println!("Result: {}", result),
        Err(e) => println!("Error: {}", e),
    }

    match divide(10.0, 0.0) {
        Ok(result) => println!("Result: {}", result),
        Err(e) => println!("Error: {}", e),
    }

}

/*
* Rust Error Codes (‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î)
*/
// Rust ‡πÄ‡∏ô‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ú‡πà‡∏≤‡∏ô Result<T, E> ‡πÅ‡∏•‡∏∞ Option<T> enum ‡πÅ‡∏ó‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ error code ‡πÅ‡∏ö‡∏ö‡∏î‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏¥‡∏°
fn divide(numerator: f64, denominator: f64) -> Result<f64, &'static str> {
    if denominator == 0.0 {
        // ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ Error
        Err("Cannot divide by zero!")
    } else {
        // ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
        Ok(numerator / denominator)
    }
}

/*
* Type Aliases (‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏ù‡∏á‡πÉ‡∏´‡πâ‡∏ä‡∏ô‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•)
*/
// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏ù‡∏á 'Kilometers' ‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö‡∏ä‡∏ô‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• i32
type Kilometers = i32;

/*
* Compiler Directives like allow (‡πÅ‡∏≠‡∏ï‡∏ó‡∏£‡∏¥‡∏ö‡∏¥‡∏ß‡∏ï‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≠‡∏°‡πÑ‡∏û‡πÄ‡∏•‡∏≠‡∏£‡πå)
*/
// #[allow(dead_code)] ‡∏à‡∏∞‡∏ö‡∏≠‡∏Å‡∏Ñ‡∏≠‡∏°‡πÑ‡∏û‡πÄ‡∏•‡∏≠‡∏£‡πå‡πÉ‡∏´‡πâ‡πÄ‡∏°‡∏¥‡∏ô‡πÄ‡∏â‡∏¢‡∏ï‡πà‡∏≠‡πÇ‡∏Ñ‡πâ‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ñ‡∏π‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ
// #[allow(unused_variables)] ‡∏à‡∏∞‡∏ö‡∏≠‡∏Å‡πÉ‡∏´‡πâ‡πÄ‡∏°‡∏¥‡∏ô‡πÄ‡∏â‡∏¢‡∏ï‡πà‡∏≠‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏ä‡πâ
#[allow(dead_code)]
#[allow(unused_variables)]
fn unused_function() {
    #[allow(unused_variables)]
    let unused_var = 42; // ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
    println!("This function is not used, but Rust won't complain.");
}